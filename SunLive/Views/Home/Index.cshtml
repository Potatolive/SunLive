@model IEnumerable<Sunlive.Entities.FanPost>

@section AdditionalMetaData
{
    <meta http-equiv="refresh" content="60000" />
}

<div id="page-title">

    <h2>Sun Music</h2>

</div>

<!--<div class="pull-left">
    <div class="form-group">
        <button type="submit" class="btn btn-default">Adithya TV</button>
        <button type="submit" class="btn btn-default">Sun Music</button>
    </div>
</div>-->

<div class="pull-right">
    <form class="form-inline" action="~/Home/Search" method="post">
       
        <div class="form-group">
            <label for="search"></label>
            <input type="text" class="form-control" id="TextContent" name="TextContent" placeholder="Enter a text to search">
        </div>
        <button type="submit" class="btn btn-default">Search</button>
    </form>
</div>

<br />
<br />
<br />

<div id="tabs" class="clear-fix clearfix">
        <div id="filters">
            <ul class="">
                <li><a href="/Home">New</a></li>
                <li><a href="/Home/Approved">Approved</a></li>
                <li><a href="/Home/Rejected">Rejected</a></li>
            </ul>
        </div>

    @if (Model.Count() == 0)
    {
        <div>
            <br />
            <br />
            <h1>No posts available to display!</h1>
        </div>
    }
    else
    {
        { 
            <div class="row" id="New">
                @foreach (var newItem in Model)
                {
                    if (newItem.Status == "New")
                    {

                        newItem.convertPubishedOnToIstDateTime();
                        
                        <div class="col-sm-6 col-md-4 item">

                            <div class="thumbnail picture">
                                @{
                                    string newImgUrl = newItem.ImageURL;

                                    if (!string.IsNullOrEmpty(newItem.CroppedImageURL))
                                    {
                                        newImgUrl = newItem.CroppedImageURL;
                                    }

                                    <div id="img_@newItem._id">
                                        <img src="@newImgUrl" class="imgforapproval"
                                             alt="No image..." style="height: auto; width: 100%;"
                                             data-holder-rendered="true" onmouseover="javascript:cropImage('@newItem._id'); return true;" />
                                    </div>
                                }

                                <!--<canvas id="preview_@newItem._id"></canvas>-->

                                <form id="form_crop_image_@newItem._id">
                                    <input hidden id="crop_image_id_@newItem._id" name="ImgId" value="@newItem._id" />
                                    <input hidden id="X_@newItem._id" name="X" />
                                    <input hidden id="Y_@newItem._id" name="Y" />
                                    <input hidden id="W_@newItem._id" name="W" />
                                    <input hidden id="H_@newItem._id" name="H" />
                                    <input hidden id="imageWidth_@newItem._id" name="imageWidth" value="0" />
                                    <input hidden id="imageHeight_@newItem._id" name="imageHeight" value="0" />
                                    <button id="submit_@newItem._id" type="button" class="btn btn-warning btn-xs pull-right hidden">
                                        <span class="glyphicon glyphicon-edit" aria-hidden="true"></span> Crop
                                    </button>
                                </form>

                                @if (!string.IsNullOrEmpty(newItem.CroppedImageURL))
                                {
                                    <button id="revert_@newItem._id" type="button" class="btn btn-warning btn-xs pull-right revertcrop"
                                            onclick="revertCrop(this, '@newItem._id');">
                                        <span class="glyphicon glyphicon-repeat" aria-hidden="true"></span> Revert
                                    </button>
                                }
                                else
                                {
                                    <button id="revert_@newItem._id" type="button" class="btn btn-warning btn-xs pull-right revertcrop hidden"
                                            onclick="revertCrop(this, '@newItem._id');">
                                        <span class="glyphicon glyphicon-repeat" aria-hidden="true"></span> Revert
                                    </button>
                                }
                                <div class="caption">
                                    <div style="margin-bottom: 20px">
                                        <span class="pull-left"><i class="icon-calendar"></i>@Html.DisplayFor(modelItem => newItem.PublishedOn)</span>
                                    </div>
                                    <div class="clearfix"></div>

                                    <hr />

                                    <div class="newsSummary pull-left">
                                        @if (newItem.TextContent.Length > 140)
                                        {
                                            @Html.Raw(newItem.TextContent.Substring(0, 140) + " ...")
                                        }
                                        else
                                        {
                                            @Html.Raw(newItem.TextContent)
                                        }
                                    </div>
                                    <span class="pull-right">- <i class="icon-user"></i> <a href="#">@Html.Raw(newItem.PublishedBy.Split(' ')[0])</a></span>

                                    <div class="clearfix"></div>

                                    <br />

                                    <div class="pull-right">
                                        @Html.ActionLink("Reject", "Reject", new { id = newItem.PostId }, new { @class = "btn btn-danger btn-xs" }) |
                                        @Html.ActionLink("Approve", "Details", new { id = newItem.PostId }, new { @class = "btn btn-success btn-xs" }) |
                                        @Html.ActionLink("Prioritize", "Prioritize", new { id = newItem.PostId }, new { @class = "btn btn-info btn-xs" }) 
                                    </div>
                                    <div class="clearfix"></div>
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>
        }
        {
            <div class="row" id="Approved">
                @foreach (var newItem in Model)
                {
                    if ((newItem.Status == "Approved" || newItem.Status == "Downloaded"))
                    {

                        newItem.convertPubishedOnToIstDateTime();

                        <div class="col-sm-6 col-md-4 item">

                            <div class="thumbnail picture">
                                @{
                        string newImgUrl = newItem.ImageURL;

                        if (!string.IsNullOrEmpty(newItem.CroppedImageURL))
                        {
                            newImgUrl = newItem.CroppedImageURL;
                        }

                        <div id="img_@newItem._id">
                            <img src="@newImgUrl" class="imgforapproval"
                                 alt="No image..." style="height: auto; width: 100%;"
                                 data-holder-rendered="true" />
                        </div>
                                }

                                @if (!string.IsNullOrEmpty(newItem.CroppedImageURL))
                                {
                                    <button id="revert_@newItem._id" type="button" class="btn btn-warning btn-xs pull-right revertcrop"
                                            onclick="revertCrop(this, '@newItem._id');">
                                        <span class="glyphicon glyphicon-repeat" aria-hidden="true"></span> Revert
                                    </button>
                                }
                                else
                                {
                                    <button id="revert_@newItem._id" type="button" class="btn btn-warning btn-xs pull-right revertcrop hidden"
                                            onclick="revertCrop(this, '@newItem._id');">
                                        <span class="glyphicon glyphicon-repeat" aria-hidden="true"></span> Revert
                                    </button>
                                }
                                <div class="caption">
                                    <div style="margin-bottom: 20px">
                                        <span class="pull-left"><i class="icon-calendar"></i>@Html.DisplayFor(modelItem => newItem.PublishedOn)</span>
                                    </div>
                                    <div class="clearfix"></div>

                                    <hr />

                                    <div class="newsSummary pull-left">
                                        @if (newItem.TextContent.Length > 140)
                                        {
                                            @Html.Raw(newItem.TextContent.Substring(0, 140) + " ...")
                                        }
                                        else
                                        {
                                            @Html.Raw(newItem.TextContent)
                                        }
                                    </div>
                                    <span class="pull-right">- <i class="icon-user"></i> <a href="#">@Html.Raw(newItem.PublishedBy.Split(' ')[0])</a></span>

                                    <div class="clearfix"></div>

                                    <br />

                                    <div class="pull-right">
                                        @Html.ActionLink("Delete", "Delete", new { id = newItem.PostId }, new { @class = "btn btn-danger btn-xs" })
                                    </div>
                                    <div class="clearfix"></div>
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>
        }
        {
            <div class="row" id="Rejected">
                @foreach (var newItem in Model)
                {
                    if (newItem.Status == "Rejected")
                    {

                        newItem.convertPubishedOnToIstDateTime();

                        <div class="col-sm-6 col-md-4 item">

                            <div class="thumbnail picture">
                                @{
                        string newImgUrl = newItem.ImageURL;

                        if (!string.IsNullOrEmpty(newItem.CroppedImageURL))
                        {
                            newImgUrl = newItem.CroppedImageURL;
                        }

                        <div id="img_@newItem._id">
                            <img src="@newImgUrl" class="imgforapproval"
                                 alt="No image..." style="height: auto; width: 100%;"
                                 data-holder-rendered="true"/>
                        </div>
                                }
                                
                                @if (!string.IsNullOrEmpty(newItem.CroppedImageURL))
                                {
                                    <button id="revert_@newItem._id" type="button" class="btn btn-warning btn-xs pull-right revertcrop"
                                            onclick="revertCrop(this, '@newItem._id');">
                                        <span class="glyphicon glyphicon-repeat" aria-hidden="true"></span> Revert
                                    </button>
                                }
                                else
                                {
                                    <button id="revert_@newItem._id" type="button" class="btn btn-warning btn-xs pull-right revertcrop hidden"
                                            onclick="revertCrop(this, '@newItem._id');">
                                        <span class="glyphicon glyphicon-repeat" aria-hidden="true"></span> Revert
                                    </button>
                                }
                                <div class="caption">
                                    <div style="margin-bottom: 20px">
                                        <span class="pull-left"><i class="icon-calendar"></i>@Html.DisplayFor(modelItem => newItem.PublishedOn)</span>
                                    </div>
                                    <div class="clearfix"></div>

                                    <hr />

                                    <div class="newsSummary pull-left">
                                        @if (newItem.TextContent.Length > 140)
                                        {
                                            @Html.Raw(newItem.TextContent.Substring(0, 140) + " ...")
                                        }
                                        else
                                        {
                                            @Html.Raw(newItem.TextContent)
                                        }
                                    </div>
                                    <span class="pull-right">- <i class="icon-user"></i> <a href="#">@Html.Raw(newItem.PublishedBy.Split(' ')[0])</a></span>

                                    <div class="clearfix"></div>

                                    <br />

                                    <div class="clearfix"></div>
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>
        }
    }
    </div>